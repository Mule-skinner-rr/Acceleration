//
//  main.c
//  ch 7 program 11, merge
//
//  Created by Ryan Roderick on 11/26/20.
//

/* From "Problem Solving and Program Design in C" by Jeri Hanly and Elliot Koffman, 7th Ed., 2013. */

/* Problem 11 page 449 */

/*
 Write a function that will merge the contents of two sorted (ascending order) arrays of type double values, storing the result in an array output paramater (still in asecnding order).  The function should not assume that both its input arrays are the same length, but can assume that one array does not contain two copies of the same value.  The resulting array should also contain no duplicate values.
 
    First array     -10.5   -1.8   3.5   6.3   7.2
    Second array     -1.8    3.1   6.3
  
 Resulting array    -10.5   -1.8   3.1   3.5   6.3   7.2
 
 HINT: When one of the inut arrays has been exhausted, do not forget to copy the remaining data of the other array into the resulting array.  Test your function with cases in which (1) the first array is exhausted first, (2) the second array is exhausted firat, and (3) the two arrays are exhausted at the same time (i.e., they end with the same value).  Rember that the arrays input to this function  MUST ALREADY BE SORTED.
 */


#include <stdio.h>
#define MAX_SIZE 21
#define SENTINEL 999.9

void initialize_array(double array[]);

void fill_to_sentinel(FILE *, double array[]);

void merge_arrays(double array_one[], double array_two[], double emergent_array[]);

void display_arrays(double array_one[], double array_two[], double emergent_array[]);

int main(int argc, const char * argv[]) {
    
    double array_one[MAX_SIZE];
    double array_two[MAX_SIZE];
    double emergent_array[MAX_SIZE];

    FILE *in_pointer_one;
    FILE *in_pointer_two;
    /* Here, the  program declares the file pointers. */

    initialize_array(array_one);
    
    initialize_array(array_two);

    initialize_array(emergent_array);
    
    in_pointer_one = fopen("First_array.txt", "r");
    in_pointer_two = fopen("Second_array.txt","r");
    /* Here, the program initializes the file pointers with access information. */
    
    fill_to_sentinel(in_pointer_one, array_one);
    
    fill_to_sentinel(in_pointer_two, array_two);
    /* Here, the program calls the 'fill_to_sentinel' function twice with the two different file pointers and arrays. */
    
    merge_arrays(array_one, array_two, emergent_array);
    
    display_arrays(array_one, array_two, emergent_array);
     
    fclose(in_pointer_one);
    fclose(in_pointer_two);

    
    return (0);
}


void initialize_array(double array[])
{
    int i;
    for (i=0;  i != MAX_SIZE;  ++i)
    {
        array[i] = SENTINEL;
    }
}


/* Here, the program declares a local file pointer that takes whatever access information that the call function sends to it via a file pointer that the program opened in the main function.  Figure 6.13 on page 346 in the book shows how to do this. */

void fill_to_sentinel(FILE *in_p,
                      double array[])
{
    double data;
    int input_status;
    int i;
    
    /* Here, the program uses the local file pointer and fills the array at the address that the call function sent to it.  Figures 7.11 and 7.12 in the book show how to do this. */
    i=0;
    input_status = fscanf(in_p, "%lf", &data);
    while (input_status == 1 &&
           data != SENTINEL &&
           i < MAX_SIZE)
    {
        array[i] = data;
        ++i;
        input_status = fscanf(in_p, "%lf", &data);
    }
    
}


void merge_arrays(double array_one[], double array_two[], double emergent_array[])
{
    int i=0, j=0, m=0;
    
    while (m < MAX_SIZE) {
        if (array_one[i] < array_two[j]) {
            emergent_array[m] = array_one[i];
            ++i;
            ++m;
        } else if (array_two[j] < array_one[i]) {
            emergent_array[m] = array_two[j];
            ++j;
            ++m;
        } else if (array_one[i] == array_two[j]) {
            emergent_array[m] = array_one[i];
            ++i;
            ++j;
            ++m;
        }
    }
}


void display_arrays(double array_one[],
                    double array_two[],
                    double emergent_array[])
{
    /* Display array_one. */
    int i;
    printf("array_one = ");
    for (i=0; array_one[i] != SENTINEL; ++i)
    {
        printf("%.1f  ", array_one[i]);
    }
    printf("\n\n");
    
    /* Display array_two. */
    printf("array_two = ");
    for (i=0; array_two[i] != SENTINEL; ++i)
    {
        printf("%.1f  ", array_two[i]);
    }
    printf("\n\n");
    
    /* Display the emergent array. */
    printf("emergent_array =  ");
    for (i=0; emergent_array[i] != SENTINEL; ++i)
    {
        printf("%.1f  ", emergent_array[i]);
    }
    printf("\n\n");
}


/* LEARNED:
 For this program, I got the 'merge_arrays' problem solved and coded pretty easily once I got to it.
 I struggled to get the 'fill_to_sentinel' part of the program to work because I was not used to importing two different text files and I wanted to write a shorter function.  At first, I had two while loops to populate each array.  I wanted to cut that down so that I could add any number of files and populate them with one 'while' loop.  I finally solved this problem by finding a problem in the book, noted above, that does this with file pointers.  I also had to give up the idea of having an 'open_files' function and learned that I would have only saved the 'fopen' statements because I would have needed to declare pointers in the main and locally in any addidional functions, making the program more confusing than it needed to be and not saving many lines of code.  However, shortening the 'fill_to_sentinel' function did save about five lines of code for each single call to it in the main function.
 
 What was special about the process is that I came back to the problem after getting started with the next one, and was able to find a solution that would allow me to post this program on Github without feeling that there was something more I should have done with it. And, I saved myself a tutor session.
 */
